generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessType {
  PUBLIC
  RESTRICTED
}

enum Role {
  admin
  moderator
  ordinary
}

model User {
  id        String  @id @default(uuid())
  clerkId   String  @unique
  name      String?
  email     String?
  role      Role    @default(ordinary)
  createdAt DateTime @default(now())

  templates FormTemplate[]  @relation("UserTemplates")
  forms     Form[]      @relation("UserForms")
  comments  Comment[]   @relation("UserComments")
  likes     Like[]      @relation("UserLikes")
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  formTemplateId String?
  formTemplate   FormTemplate? @relation(fields: [formTemplateId], references: [id])
}

model FormTemplate {
  id              String      @id @default(uuid())
  formTitle       String
  formDescription String?     @default("")
  questions       Question[]
  accessType      AccessType  @default(PUBLIC)
  allowedUsers    String[]    @default([])
  tags            Tag[]

  createdAt   DateTime     @default(now())
  authorId    String
  author      User         @relation("UserTemplates", fields: [authorId], references: [id])
  theme       String?
  comments    Comment[]    @relation("TemplateComments")
  likes       Like[]       @relation("TemplateLikes")
  isPublic    Boolean      @default(true)

  Form Form[] @relation("FormTemplates")
}

model Question {
  id            String   @id @default(uuid())
  questionTitle String
  type          String
  options       QuestionOption[]
  imageUrl      String?
  isRequired    Boolean  @default(false)
  position      Int 
  formTemplateId String
  formTemplate  FormTemplate @relation(fields: [formTemplateId], references: [id])
}

model QuestionOption {
  id          String   @id @default(uuid())
  text        String
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Form {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation("UserForms", fields: [userId], references: [id])
  templateId  String
  template    FormTemplate @relation("FormTemplates", fields: [templateId], references: [id])
  title       String 
  description String?
  questions   Json       
  createdAt   DateTime   @default(now())

  responses   Response[] @relation("FormResponses")
}

model Response {
  id        String   @id @default(uuid())
  formId    String
  form      Form     @relation("FormResponses", fields: [formId], references: [id])
  questionId String
  answer    Json
}

model Comment {
  id          String   @id @default(uuid())
  text        String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation("UserComments", fields: [userId], references: [id])
  templateId  String
  template    FormTemplate @relation("TemplateComments", fields: [templateId], references: [id])

  @@index([userId, templateId])  
}

model Like {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation("UserLikes", fields: [userId], references: [id])
  templateId  String
  template    FormTemplate @relation("TemplateLikes", fields: [templateId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([userId, templateId]) 
}

model Test {
  id    String @id @default(uuid())
  name  String
}
