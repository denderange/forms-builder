generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessType {
  PUBLIC
  RESTRICTED
}

enum Role {
  admin
  moderator
  ordinary
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
}

model User {
  id        String  @id @default(uuid())
  clerkId   String? @unique
  name      String? @default("")
  email     String? @default("")
  role      Role?   @default(ordinary)
  apiToken     String? @unique
  createdAt DateTime? @default(now())

  forms     Form[]      @relation("UserForms")
  comments  Comment[]   @relation("UserComments")
  likes     Like[]      @relation("UserLikes")

  formTemplates FormTemplate[]
}

model FormTemplate {
  id              String      @id @default(uuid())  //ok
  formTitle       String      @default("")          //ok
  formDescription String?     @default("")          //ok
  questions       Question[] 
  accessType      String      @default("PUBLIC")    //ok
  allowedUsers    String[]                          //ok
  templateTags    String[]                          //ok
  
  createdAt   DateTime?    @default(now())          //ok
  authorClerkId    String                                //ok
  theme       String?      @default("")             //ok

  forms        Form[] @relation("FormTemplates")     //ok
  author      User        @relation(fields: [authorClerkId], references: [clerkId], onDelete: Cascade)
}

model Question {
  id            String   @id @default(uuid())
  questionTitle String?  @default("")
  type          String?  @default("")
  options       QuestionOption[]
  imageUrl      String?  @default("")
  isRequired    Boolean? @default(false)
  position      Int?     @default(0)
  
  formTemplateId  String 
  formTemplate    FormTemplate @relation(fields: [formTemplateId], references: [id], onDelete: Cascade)
}

model QuestionOption {
  id          String   @id @default(uuid())
  text        String?  @default("")
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Form {
  id          String     @id @default(uuid())
  userId      String?
  user        User?       @relation("UserForms", fields: [userId], references: [id])
  templateId  String?
  template    FormTemplate? @relation("FormTemplates", fields: [templateId], references: [id])
  title       String?     @default("")
  description String?     @default("")
  questions   Json?     
  createdAt   DateTime?   @default(now())

  responses   Response[] @relation("FormResponses")
}

model Response {
  id        String   @id @default(uuid())
  formId    String?
  form      Form?     @relation("FormResponses", fields: [formId], references: [id])
  questionId String?
  answer    Json?    
}

model Comment {
  id          String   @id @default(uuid())
  text        String?  @default("")
  createdAt   DateTime? @default(now())
  userId      String?
  user        User?     @relation("UserComments", fields: [userId], references: [id])
  templateId  String?

  @@index([userId, templateId])  
}

model Like {
  id          String   @id @default(uuid())
  userId      String?
  user        User?     @relation("UserLikes", fields: [userId], references: [id])
  templateId  String?
  createdAt   DateTime? @default(now())

  @@unique([userId, templateId]) 
}

model Test {
  id    String @id @default(uuid())
  name  String? @default("")
}
